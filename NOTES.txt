En base a curso: https://www.youtube.com/watch?v=I4vgw0dcKwo
*Algunas cosas no se siguieron al pie de la letra por cuestión de que a mi me salian errores y así, y se tuvieron que hacer de manera distinta.

SE ESTARÁN OMITIENDO CIERTAS NOTAS SOBRE PASOS QUE VAYA HACIENDO EL INSTRUCTOR SOBRE ASPECTOS QUE YA SE SABE COMO FUNCIONAN





***Para crear el repositorio con los archivos del proyecto directamente dentro de él en lugar de que quede la carpeta resultante del comando "composer create-project laravel/laravel *nombre*" y dentro de ella los archivos del proyecto:
-Se crea repositorio en GitHub (en web con opción "New" y todo lo demás)
-Se crea el proyecto localmente (puede ser en escritorio por ejemplo, para ir a esa ubicación usar "cd .\Desktop\") con comando "composer create-project laravel/laravel dash_roles"
 -Se corre para ver si todo bien con comando "php artisan serve"
  *Puede haber detalle con lo de "sqlite", para ello solo cambiar en el .env de "DB_CONNECTION=sqlite" a "DB_CONNECTION=mysql"
-Se abre terminal en el proyecto y se ejecutan:
 -"git init" (inicializa Git en el proyecto)
 -"git add ."
 -"git commit -m "Initial commit"
 -"git branch -M main" (se crea, y a su vez se cambia hacia rama "main")
 -"git remote add origin https://github.com/erickavendanoh/laravel-roles-permisos-auth-CRUD.git" (se añade el repositorio remoto de GitHub como el origen (origin) para el repositorio local)
 -"git push -u origin main" (ya con el repositorio local configurado correctamente, se sube la rama main al repositorio remoto. La opción -u (o --set-upstream) establece la rama main local para rastrear la rama main en el repositorio remoto. Esto permite en el futuro simplemente usar "git push" sin tener que especificar la rama para subir cambios y así)


Ya después para clonarlo en otras partes, o igual para ya borrar el repositorio local y clonarlo y trabajarlo ya directamente del repositorio en GitHub:
-Borrar el proyecto localmente (esto solo aplica en PC donde se creó el proyecto, si no se omite)
-Ir al repositorio en GitHub y copiar el link de "HTTPS" que aparece en opción "Code"
-Ir a la ubicación donde se desea clonar el repositorio, abrir una terminal y ejeuctar " git clone https://github.com/erickavendanoh/laravel-roles-permisos-auth-CRUD.git "
-Abrir la carpeta resultante en VS Code
-Crear un archivo ".env" y dentro pegar lo contenido en "env.txt"
-Abrir una terminal y ejecutar "composer install"
Listo. Correrlo con comandos necesarios ("php artisan migrate", y otros si es el caso)





Proyecto que involucra creación de usuarios, roles y permisos, así como un CRUD, en este caso de blogs.





Se empleara:
-Paquete de SPATIE "Laravel-permission" (https://spatie.be/docs/laravel-permission/v6/introduction)
-Bootstrap. *En curso emplean librerias "Laravel UI Stisla" (que emplea Bootstrap v4.6) para estructura y estilos para el panel de control (https://github.com/InfyOmLabs/laravel-ui-stisla, https://infyom.com/open-source/laravel-ui-stisla/docs), y "Laravel collective" (https://laravelcollective.com/docs/6.x/html) sin embargo estas ya no son soportadas en las nuevas versiones de Laravel.



El paquete Laravel-permission ya maneja todas las relaciones necesarias entre permisos, roles y usuarios del sistema.

Los roles tienen ciertos permisos (acciones que se pueden hacer en el sistema), y los usuarios pueden tener un rol





SPATIE recomienda definir un usuario con los privilegios de "Super-Admin", es decir que ese va a tener todos los privilegios en cuanto a los permisos que se irán definiendo.





****Instalación de lo necesario y configuraciones: 

Como las librerías que empleaba instructor para estructura y vistas no estaban disponbles, se empleará Jetstream, y se incluye también Livewire para lo que pueda servir...
" composer require laravel/jetstram "
" php artisan jetstream:install livewire "
" php artisan migrate:fresh " (recordar que con este comando se borran las tablas generadas hasta el momento, ósea se inicia de 0 la BD de nuevo prácticamente, y se vuelven a correr las migraciones creando nuevamente las tablas correspondientes)


*En archivo resources\views\welcome.blade.php, que es de los que ya se crean por defecto desde la creación de un proyecto de Laravel, viene una validación ("@if (Route::has('login'))") que básicamente controla que lo de dentor de esa validación se muestre si es que en las rutas viene alguna definida con "login", mientras no. En este caso no es hasta que instalé Jetstream (que ya trae incorporada toda esa parte de usuarios, registros e inicios de sesión y así) que aparece esa parte donde se valida eso en el resources\views\welcome.blade.php

Ya con Jetstream además de tener las vistas de registro de usuarios, inicio de sesión e incluso una plantilla, también con la parte de Livewire tendremos los componentes que se generan en resources/views/componentes, así como ya incluso la reactividad en casos donde se pueda aplicar

Se incluyó Boostrap también. Añadiendo en resources\views\layouts\app.blade.php los CDN correspondientes, el de CSS antes del </head> y el de JS antes del </body>



Se crea BD "dash_roles"  (con CHARACTER SET utf8mb4 y COLLATE utf8mb4_spanish_c)



Se instala paquete "Laravel-permission":
-" composer require spatie/laravel-permission "


Agregar en config\app.php:
"
use Illuminate\Support\ServiceProvider;
...

'providers' => ServiceProvider::defaultProviders()->merge([
        // Other Service Providers
        Spatie\Permission\PermissionServiceProvider::class,
        
    ])->toArray(),
"


"php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider" (para publicar (agregar al proyecto) los archivos de permission.php y el de la migración que crea las tablas correspondientes a los roles, permisos y aquellas que relacionan toda esa parte)


"php artisan optimize:clear"


"php artisan migrate"





"php artisan make:migration create_blogs_table"

"php artisan make:model Blog"


Se usa el modelo app\Models\User.php que ya viene desde la creación del proyecto, agregar:
"
//spatie
use Spatie\Permission\Traits\HasRoles;
...

use HasRoles;
"


De apartado de "Middleware" en documentación de paquete "Laravel-permission" (https://spatie.be/docs/laravel-permission/v6/basic-usage/middleware) copiar las siguiemntes líneas y pegarlas en bootstrap\app.php dentro de función "->withMiddleware(function (Middleware $middleware) { ... })":
"
$middleware->alias([
            'role' => \Spatie\Permission\Middleware\RoleMiddleware::class,
            'permission' => \Spatie\Permission\Middleware\PermissionMiddleware::class,
            'role_or_permission' => \Spatie\Permission\Middleware\RoleOrPermissionMiddleware::class,
        ]);
"
Con eso se configuran los tres modelos a emplear


Se agregan unas rutas a web.php, aún no se crean los controllers pero para ir definiendolas de una vez:
"
use App\Http\Controllers\HomeController;
use App\Http\Controllers\RolController;
use App\Http\Controllers\UsuarioController;
use App\Http\Controllers\BlogController;
...

Route::group(['middleware' => ['auth']], function(){
    Route::resource('roles', RolController::class);
    Route::resource('usuarios', UsuarioController::class);
    Route::resource('blogs', BlogController::class);
});
"
*Los controllers se definiran de tipo "resource" (esto definido desde comando con el que se crean) para ya tener toda la parte del CRUD (ya se crean con todos los métodos correspondientes)


"php artisan make:controller RolController --resource"

"php artisan make:controller UsuarioController --resource"

"php artisan make:controller BlogController --resource"

"php artisan route:list" (para ver las rutas que se tienen. En este caso se visualizan las generadas a lo respectivo de todos los CRUD debido a las rutas "resource" de algunos controllers)


En app\Http\Controllers\RolController.php agregar:
"
use Illuminate\Routing\Controllers\HasMiddleware;
use Illuminate\Routing\Controllers\Middleware;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;
use Illuminate\Support\Facades\DB;
...

class RolController extends Controller implements HasMiddleware

...

public static function middleware(): array
    {
        return [
            // examples with aliases, pipe-separated names, guards, etc:
            // 'role_or_permission:manager|edit articles',
            // new Middleware('role:author', only: ['index']),
            // new Middleware(\Spatie\Permission\Middleware\RoleMiddleware::using('manager'), except:['show']),
            new Middleware(\Spatie\Permission\Middleware\PermissionMiddleware::using(['ver-rol', 'crear-rol', 'editar-rol', 'borrar-rol']), only:['index']),
            new Middleware(\Spatie\Permission\Middleware\PermissionMiddleware::using('crear-rol'), only:['create', 'store']),
            new Middleware(\Spatie\Permission\Middleware\PermissionMiddleware::using('editar-rol'), only:['edit', 'update']),
            new Middleware(\Spatie\Permission\Middleware\PermissionMiddleware::using('borrar-rol'), only:['destroy']),
        ];
    }


...
"
se definen los permisos dentro del "using()" (si hay más de uno se colocan a manera de arreglo) y en el arreglo con el "['only'=>[]]" los métodos que podrán ser capaces de emplear aquellos con esos permisos

Se define lo correspondiente al resto de métodos del CRUD en app\Http\Controllers\RolController.php, en algunos con algunos métodos ya de spatie como "->syncPermissions()"

Se crean las vistas relacionadas a CRUD de blogs, roles y usuarios (las de index ya incluirán la parte de crear también)





Se define la lógica de los métodos en app\Http\Controllers\UsuarioController.php y app\Http\Controllers\BlogController.php.

En app\Http\Controllers\UsuarioController.php:
"
use App\Models\User;
use Spatie\Permission\Models\Role;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Arr;
...
"

En app\Http\Controllers\BlogController.php:
"
use App\Models\Blog;
use Illuminate\Routing\Controllers\HasMiddleware;
use Illuminate\Routing\Controllers\Middleware;
...

public static function middleware(): array
  {
      return [
          new Middleware(\Spatie\Permission\Middleware\PermissionMiddleware::using(['ver-blog', 'crear-blog', 'editar-blog', 'borrar-blog']), only:['index']),
          new Middleware(\Spatie\Permission\Middleware\PermissionMiddleware::using('crear-blog'), only:['create', 'store']),
          new Middleware(\Spatie\Permission\Middleware\PermissionMiddleware::using('editar-blog'), only:['edit', 'update']),
          new Middleware(\Spatie\Permission\Middleware\PermissionMiddleware::using('borrar-blog'), only:['destroy']),
      ];
  }
"
Se definen los permisos que debe tener el usuario para poder emplear los respectivos métodos de ese Controller.





Para definir un usuario Super-Admin (aquel que tendrá siempre todos los permisos).

En app\Providers\AppServiceProvider.php:
"
use Illuminate\Support\Facades\Gate;
...

public function boot(): void {...
// Implicitly grant "Super Admin" role all permissions
        // This works in the app by using gate-related functions like auth()->user->can() and @can()
        Gate::before(function ($user, $ability) {
            return $user->email == 'admin@gmail.com' ?? null;
        });
"
Se define el email del usuario que, cuando se cree (en el apartado de Register de Jetstream, en este caso que se está empleando Jetstream), Spatie reconocerá como el que tendrá los permisos correspondientes al rol de Super-Admin ósea todos.





Se registrarán en tabla "permissions" los permisos que se han definido al momento, mediante un seeder.

" php artisan make:seeder SeederTablaPermisos "


En database\seeders\SeederTablaPermisos.php:
"
use Spatie\Permission\Models\Permission;
...

public function run(): void{...
$permisos = [
            //roles
            'ver-rol', 
            'crear-rol', 
            'editar-rol', 
            'borrar-rol',
            //blogs
            'ver-blog', 
            'crear-blog', 
            'editar-blog', 
            'borrar-blog',
        ];

        foreach($permisos as $permiso)
        {
            Permission::create(['name' =>$permiso]);
        }
"





*Para los iconos se empleó "Font Awesome", que es un conjunto de herramientas de fuentes e íconos basado en CSS y Less. Para poder emplearlo se descarga desde liga: https://fontawesome.com/v4/get-started/ en base a sección "Download & Customize" dando clic en opción "Download"->descomprimir el zip->la carpeta resultante (checar que dentro no haya otra contenida, si es así sería la que está contenida) copiarla y pegarla dentro de carpeta "vendor" (previamente creada dentro de carpeta "public" del proyecto)->luego, en archivo "resources\views\layouts\app.blade.php" hacer referencia al archivo .css con el que se emplean: " <link rel="stylesheet" href="{{ asset('vendor/font-awesome-4.7.0/css/font-awesome.css') }}"> <!--Para iconos de Font Awesome--> " (con función "asset()" se indica que se apunta a carpeta "public" del proyecto, y ya lo que va dentro es lo que sigue de la ruta, como las carpetas y archivos que van dentro y a los que se hará referencia en específico)





Sobre resources\views\usuarios\index.blade.php:
Para obtener los nombres de los roles que tiene un usuario: "$usuario->getRoleNames()"


Como se crearon como tipo "resource" los controllers cuando se crearon con sus respectivos comandos, y como están declarados así en el web.php, la forma de pasar parámetros a las rutas cambia un poco. Por ejemplo para la parte de editar de usuarios, cuyo nombre de la ruta es "usuarios.edit", el parámetro no es "id" sino "usuario" y el acomodo es "usuarios/{usuario}/edit", por lo que el href de los botones que dirijan allí sería: " <a class="btn btn-info text-white"  href="{{route('usuarios.edit', ['usuario' => $usuario->id])}}">Editar</a> ". Lo mismo para la eliminación (con destroy)





Se emplean las directivas (nativas de Laravel y que se emplean en este caso junto con Laravel-permission) @can('*nombre del permiso*') y @endcan, que permiten validar si el usuario logeado tiene cierto permiso, y ya lo que vaya dentro de esas directivas solo lo podrán visualizar los usuarios que tengan ese permiso (ósea que su rol o roles tengan ese permiso incluido). *Esta es, según la documentación oficial, mejor práctica que usar "->hasRole('*nombre del rol*')". 
